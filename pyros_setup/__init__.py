# -*- coding: utf-8 -*-
from __future__ import absolute_import

import importlib

"""
Small setup package to dynamically interface with ROS
"""
from ._version import __version__

import os
import types
import sys

# forcing minimal version for pyros_config (very important since we play with multiple python environments...)
# This should allow pkg_resources to go through multiple version fo the same package... Ref : http://bugs.python.org/setuptools/issue139
# but it seems not to work. more testing needed.
# __requires__ = [
#     "pyros_config>=0.2"
# ]
import pkg_resources
# This produces a version conflict if the imported version is not the correct one. Fix your distro.
pkg_resources.require("pyros_config>=0.2")

# Configuring logging default handler
import logging
_logger = logging.getLogger(__name__)

from pyros_config import ConfigHandler



"""
Configure access to a ros distro (using the instance path of this package).
This is designed after Flask instance configuration mechanism http://flask.pocoo.org/docs/0.10/config/#instance-folders
:param instance_path: path to the instance folder. defaults to a sensible 'instance' location (refer to Flask doc)
:param instance_relative_config: whether the configuration file is in the instance folder (or the root_path)
:param root_path: path to the application's folder
:return:
"""

#: Smart Default distro detection (as early as possible)
if os.path.exists('/opt/ros/kinetic'):
    DETECTED_DISTRO = 'kinetic'
    DETECTED_DISTRO_PATH = '/opt/ros/kinetic'
elif os.path.exists('/opt/ros/jade'):
    DETECTED_DISTRO = 'jade'
    DETECTED_DISTRO_PATH = '/opt/ros/jade'
elif os.path.exists('/opt/ros/indigo'):
    DETECTED_DISTRO = 'indigo'
    DETECTED_DISTRO_PATH = '/opt/ros/indigo'
else:
    DETECTED_DISTRO = 'unknown'
    DETECTED_DISTRO_PATH = 'unknown'


# we create a configuration (in our detected instance path) to point us to the correct distro
distro_config_handler = ConfigHandler(
    __name__,
    instance_path=None,
    instance_relative_config=True,
    root_path=None,
    default_config={
        'DISTRO': DETECTED_DISTRO,
    },
)


def configure(self, distro_config=None):
    """
    load configuration
    :param config:
        if string, it is assumed to be a path to a python configuration file
        else if dict, it is assumed to directly contain the configuration settings
        otherwise the object passed will be introspected to attempt to set the configuration settings.
    :return: self
    """

    distro_config = distro_config or 'distro.pyros.cfg'

    # TODO : maybe we can abuse the '.pth' system here ??
    # In full ros setup case, we only need a string OR path
    # In (TODO) import ros setup case, we probably can rely on .pth system...

    self.distro_config_handler.configure_file(config=distro_config, create_if_missing="""
    # default configuration generated by pyros_setup.indigo
    # Usage from python :
    # import pyros_setup
    # pyros_setup.configure().activate()
    #
    # Fill in your workspaces here, if you want pyros_setup to dynamically import ROS packages from it.
    DISTRO={DETECTED_DISTRO}
    """.format(**locals()))

    distro_mod = importlib.import_module('.distro', package=__package__)  # relative import of submodule

    return self.distro_mod.configure()


def activate(self):
    """
    Activate
    :return: self
    """

    return self.distro_mod.activate()


__all__ = [
    '__version__',
]
